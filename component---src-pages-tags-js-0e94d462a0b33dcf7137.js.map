{"version":3,"sources":["webpack:///./src/components/Sidebar/Category/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/SEO/index.js"],"names":["config","friends","Friend","className","map","friend","ExternalLink","href","title","key","rel","LatestPost","posts","node","to","frontmatter","url","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","email","zhihuUsername","iconUrl","about","facebook","Icon","icon","target","Sidebar","latestPosts","src","alt","query","render","data","all","limited","Tag","name","count","TagPage","allMarkdownRemark","mapping","edges","forEach","tags","Array","from","Object","keys","sort","b","a","style","margin","item","siteTitleAlt","isPost","description","image","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-pages-tags-js-0e94d462a0b33dcf7137.js","sourcesContent":["import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport { config } from '../../../../data';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"category\">\n    <p>카테고리</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend.href}\n        title={friend.title}\n        key={friend.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\n\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst LatestPost = ({ posts }) => (\n  <div className=\"latest-post\">\n    <p>최근 글</p>\n    {posts.map(({ node }) => (\n      <Link\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n      >\n        {node.frontmatter.title}\n      </Link>\n    ))}\n  </div>\n);\n\nLatestPost.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Category from '../Category';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Information = ({ totalCount, posts }) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      총 포스팅: &nbsp;\n      {totalCount}\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Category />\n  </div>\n);\n\nInformation.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  posts: PropTypes.array,\n};\n\nInformation.defaultProps = {\n  posts: [],\n};\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { config } from '../../../data';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUsername,\n  zhihuUsername,\n  email,\n  iconUrl,\n  about,\n  facebook,\n} = config;\n\nconst Icon = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>LouiMinister</h4>\n      </Link>\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-1\">{wordings[1]}</p>\n      <Icon\n        href={`https://github.com/${githubUsername}`}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      {facebook\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\n      }\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Sidebar from '../components/Sidebar';\nimport Tag from '../components/Tag';\nimport SEO from '../components/SEO';\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data }) => {\n  const { allMarkdownRemark } = data;\n\n  const mapping = {};\n\n  allMarkdownRemark.edges.forEach(({ node }) => {\n    const { tags } = node.frontmatter;\n    tags.forEach((name) => {\n      if (mapping[name]) {\n        mapping[name] += 1;\n      } else {\n        mapping[name] = 1;\n      }\n    });\n  });\n\n  const tags = Array.from(Object.keys(mapping)).sort(\n    (b, a) => mapping[a] - mapping[b],\n  );\n\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col order-2\">\n          {tags.map(item => (\n            <Tag name={item} key={item} count={mapping[item]} />\n          ))}\n        </div>\n      </div>\n      <SEO\n        title=\"標籤\"\n        url=\"/tags/\"\n        siteTitleAlt=\"Calpa's Blog\"\n        isPost={false}\n        description=\"Tags Page\"\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query getAllTags {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n"],"sourceRoot":""}